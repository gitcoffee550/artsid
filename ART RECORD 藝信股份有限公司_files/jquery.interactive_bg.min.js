(function(){
	var interactiveBg = function(el, o){
		this.$element = $(el);
		this.defaults = {
			bg_selector : '._interactive_bg',
			strength: 25,
			scale: 1.05,
			animationSpeed: "100ms",
			contain: true,
			fixed: false,
			wrapContent: false
		};
		this.settings = $.extend({}, this.defaults, o);
		this.$bg = this.$element.find(this.settings.bg_selector);

		if (this.settings.wrapContent == false) {
			this.$bg.prepend("<div class='ibg-bg'></div>")
		} else {
			this.$bg.wrapInner("<div class='ibg-bg'></div>")
		}

		this.init();
		var that = this;
		$(window).off('resize.'+this.$element.attr('id')).on('resize.'+this.$element.attr('id'),function(){
			that.init();
		});

	};

	interactiveBg.prototype.init = function(){
		var that = this,
			h = that.$element.outerHeight(),
			w = that.$element.outerWidth(),
			sh = that.settings.strength / h,
			sw = that.settings.strength / w,
			has_touch = 'ontouchstart' in document.documentElement;

		if (that.settings.contain == true) {
			that.$bg.css({
				overflow: "hidden"
			});
		}
		// Set background to the newly added container.
		that.$element.data("ibg-bg",that.$element.attr("data-ibg-bg"));
		if (that.$element.data("ibg-bg") !== undefined) {
			that.$bg.find("> .ibg-bg").css({
				"background" : "url('" + that.$element.data("ibg-bg") + "') no-repeat center center",
				"background-size" : "cover",
				"background-attachment" : that.settings.fixed? 'fixed' : 'scroll',
				"-webkit-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
				"-moz-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
				"-o-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
				"transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)"
			});
		}

		that.$bg.find("> .ibg-bg").css({
			width: w,
			height: h
		})



		if(has_touch || screen.width <= 699) {
			// For Mobile
			// Add support for accelerometeron mobile
			try{
				window.removeEventListener('devicemotion',deviceMotionHandler, false);
			}catch(e){
				console.log(e);
			}
			window.addEventListener('devicemotion', deviceMotionHandler, false);

			function deviceMotionHandler(eventData) {
				var accX = Math.round(event.accelerationIncludingGravity.x*10) / 10,
					accY = Math.round(event.accelerationIncludingGravity.y*10) / 10,
					xA = -(accX / 10) * that.settings.strength,
					yA = -(accY / 10) * that.settings.strength,
					newX = -(xA*2),
					newY = -(yA*2);

				that.$bg.find("> .ibg-bg").css({
					"-webkit-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
					"-moz-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
					"-o-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
					"transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")"
				});

			}

		} else {
			// For Desktop
			// Animate only scaling when mouse enter
			that.$element.off('mouseenter.interactive_bg').on('mouseenter.interactive_bg',function(e) {
				//if (that.settings.scale != 1) that.$bg.addClass("ibg-entering")
				that.$bg.find("> .ibg-bg").css({
					"-webkit-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-moz-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-o-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-webkit-transition": "-webkit-transform " + that.settings.animationSpeed + " linear",
					"-moz-transition": "-moz-transform " + that.settings.animationSpeed + " linear",
					"-o-transition": "-o-transform " + that.settings.animationSpeed + " linear",
					"transition": "transform " + that.settings.animationSpeed + " linear"
				}).on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function(){

					// This will signal the mousemove below to execute when the scaling animation stops
					that.$bg.removeClass("ibg-entering")
				});
			}).off('mousemove.interactive_bg').on('mousemove.interactive_bg',function(e){
				// This condition prevents transition from causing the movement of the background to lag
				//if (!that.$bg.hasClass("ibg-entering") && !that.$bg.hasClass("exiting")) {
					var pageX = e.pageX || e.clientX,
						pageY = e.pageY || e.clientY,
						pageX = (pageX - that.$element.offset().left) - (w / 2),
						pageY = (pageY - that.$element.offset().top) - (h / 2),
						newX = ((sw * pageX)) * - 1,
						newY = ((sh * pageY)) * - 1;
					// Use matrix to move the background from its origin
					// Also, disable transition to prevent lag
					that.$bg.find("> .ibg-bg").css({
						"-webkit-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
						"-moz-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
						"-o-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
						"transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + "," + newX + "," + newY + ")",
						"-webkit-transition": "none",
						"-moz-transition": "none",
						"-o-transition": "none",
						"transition": "none"
					});
				//}
			}).off('mouseleave.interactive_bg').on('mouseleave.interactive_bg',function(e) {
				//if (that.settings.scale != 1) that.$bg.addClass("ibg-exiting")
				// Same condition applies as mouseenter. Rescale the background back to its original scale
				that.$bg.addClass("ibg-exiting").find("> .ibg-bg").css({
					"-webkit-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-moz-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-o-transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"transform": "matrix(" + that.settings.scale + ",0,0," + that.settings.scale + ",0,0)",
					"-webkit-transition": "-webkit-transform " + that.settings.animationSpeed + " linear",
					"-moz-transition": "-moz-transform " + that.settings.animationSpeed + " linear",
					"-o-transition": "-o-transform " + that.settings.animationSpeed + " linear",
					"transition": "transform " + that.settings.animationSpeed + " linear"
				}).on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function(){
					that.$bg.removeClass("ibg-exiting")
				});
			});
		}
	};

	interactiveBg.prototype.destroy = function(){
		var that = this;
		that.$bg.removeClass("ibg-entering").removeClass("ibg-exiting");
		that.$bg.empty();
		that.$element.off('mouseenter.interactive_bg').off('mousemove.interactive_bg').off('mouseleave.interactive_bg');
		that.$element.data("ibg-bg",false);
		that.$element.data('interactiveBg', false);
	};

	function PLUGIN(o){
		var $objs = $(this);
		$objs.each(function(e){
			$obj = $(this);
			if(typeof o == 'string'){
				var data = $obj.data('interactiveBg');
				if(!data) $obj.data('interactiveBg', (data = new interactiveBg($obj, o)));
				return data[o]();
			}else if(typeof o == 'object'){
				$obj.data('interactiveBg', (data = new interactiveBg($obj, o)));
			}
		});	
		return this;
	}

	$.fn.interactiveBg = PLUGIN;

})();